/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.menu.file;

import controller.dao.simpledao.AuthorDao;
import controller.dao.simpledao.BookDao;
import controller.dao.simpledao.GenderDao;
import java.sql.SQLException;
import java.util.List;
import model.dto.BookDTO;
import view.utils.Utils;
import controller.dao.simpledao.SimpleObjDao;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.dto.AuthorDTO;
import model.dto.GenderDTO;

/**
 *
 * @author Nana
 */
public class jdBooks extends javax.swing.JDialog {
    private SimpleObjDao simpleObjDao;
    private DefaultComboBoxModel modelCboGenders;
    private DefaultComboBoxModel modelCboAuthors;
    private List <BookDTO> listBooks;
    private List <AuthorDTO> listAuthors;
    private boolean flagBtnNew;
    private boolean flagBtnEdit;
    
    public jdBooks(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        instanceInitComponent();
        fillInitComponent();
        turnOnOffInitComponent(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstBooks = new javax.swing.JList<>();
        txtNameBook = new javax.swing.JTextField();
        cboAuthorsBook = new javax.swing.JComboBox<>();
        cboGendersBook = new javax.swing.JComboBox<>();
        btnNew = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        chkAvailable = new javax.swing.JCheckBox();
        addAuthor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lstBooks.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstBooks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBooksValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstBooks);

        cboAuthorsBook.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aquí todos los autores" }));

        cboGendersBook.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aquí todos los géneros" }));

        btnNew.setText("Nuevo");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSend.setText("Aceptar");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnEdit.setText("Modificar");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSearch.setText("Ir");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Propiedades del libro");

        chkAvailable.setText("En biblioteca");
        chkAvailable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkAvailable.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkAvailable.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        addAuthor.setText("+");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(chkAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNameBook)
                            .addComponent(cboAuthorsBook, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboGendersBook, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNameBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboAuthorsBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAuthor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboGendersBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chkAvailable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNew)
                            .addComponent(btnEdit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSend)
                            .addComponent(btnCancel)))
                    .addComponent(jScrollPane1))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstBooksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBooksValueChanged
        fillFieldFromJListBooks(lstBooks.getSelectedIndex());
    }//GEN-LAST:event_lstBooksValueChanged

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (validateFill()){
            
            simpleObjDao = new BookDao();

            AuthorDTO author = (AuthorDTO) cboAuthorsBook.getSelectedItem();
            GenderDTO gender = (GenderDTO) cboGendersBook.getSelectedItem();

            BookDTO book = new BookDTO(0,
                    txtNameBook.getText(),
                    author.getId(), 
                    gender.getId(),
                    chkAvailable.isSelected());
            if (flagBtnNew){
                insertBook(simpleObjDao, book);
                flagBtnNew = false;
            }else if (flagBtnEdit) {
                updateBook(simpleObjDao, book);
                flagBtnEdit = false;
            }
            turnOnOffInitComponent(true);
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        flagBtnNew = true;
        cleanField();
        txtNameBook.requestFocus();
        turnOnOffInitComponent(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (lstBooks.getSelectedIndex() >= 0) {
            flagBtnEdit = true;
            txtNameBook.requestFocus();
            turnOnOffInitComponent(false); 
            chkAvailable.setEnabled(false);
        }else {
            JOptionPane.showMessageDialog(null, "Necesario seleccionar un libro de la lista");
        }   
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        flagBtnNew = false;
        flagBtnEdit = false;
        turnOnOffInitComponent(true);
        fillFieldFromJListBooks(lstBooks.getSelectedIndex());
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        simpleObjDao = new BookDao();
        try {
            listBooks = simpleObjDao.select_for_name(txtSearch.getText());
            Utils.fillJList(listBooks, lstBooks);
        } catch (SQLException ex) {
            System.out.println("Excepcion en la carga de lista de books");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex);
        } 
        cleanField();
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jdBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jdBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jdBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jdBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jdBooks dialog = new jdBooks(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void fillBooksList () {
        simpleObjDao = new BookDao();
        try {
            listBooks = simpleObjDao.select();
            Utils.fillJList(listBooks, lstBooks);
        } catch (SQLException ex) {
            System.out.println("Excepcion en la carga de lista de books");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }
    
    private void fillCboGendersBook(){
        simpleObjDao = new GenderDao();
        modelCboGenders = new DefaultComboBoxModel();
        try {
            List<GenderDTO> genders = simpleObjDao.select();
            Utils.fillComboBox(modelCboGenders, genders, cboGendersBook);     
        } catch (SQLException ex) {
            System.out.println("Excepcion en la carga del combo de genders");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex);
        }               
    }
    
    private void fillCboAuthorsBooks () {
        modelCboAuthors = new DefaultComboBoxModel();
        simpleObjDao = new AuthorDao();
        try {
            listAuthors = simpleObjDao.select();
            Utils.fillComboBox(modelCboAuthors, listAuthors, cboAuthorsBook);

        } catch (SQLException ex) {
            System.out.println("Excepcion en la carga de lista de books");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }
    
    private void fillFieldFromJListBooks (int i) {
        if (i >= 0){
            txtNameBook.setText(listBooks.get(i).getName());
            selectGenderFromJListBooks(listBooks.get(i).getIdGender());
            selectAuthorFromJListBooks(listBooks.get(i).getIdAuthor());
            chkAvailable.setSelected(listBooks.get(i).isAvailable());
        }
    }
    
    private void selectGenderFromJListBooks(int id){
        for (int i = 0; i < cboGendersBook.getItemCount(); i++) {
            GenderDTO g =  (GenderDTO) modelCboGenders.getElementAt(i);
            if (g.getId() == id){
                cboGendersBook.setSelectedIndex(i);
                return;
            }
        }
    }
    
    private void selectAuthorFromJListBooks(int id){
        for (int i = 0; i < cboAuthorsBook.getItemCount(); i++) {
            AuthorDTO a = (AuthorDTO) modelCboAuthors.getElementAt(i);
            if (a.getId() == id){
                cboAuthorsBook.setSelectedIndex(i);
                return;
            }
        }
    }
    
    private void cleanField () {
        txtNameBook.setText("");
        cboAuthorsBook.setSelectedIndex(-1);
        cboGendersBook.setSelectedIndex(-1);
    }
    
    private void turnOnOffInitComponent(boolean x){
        txtSearch.setEnabled(x);
        btnSearch.setEnabled(x);
        lstBooks.setEnabled(x);
        txtNameBook.setEnabled(!x);
        cboAuthorsBook.setEnabled(!x);
        addAuthor.setEnabled(!x);
        cboGendersBook.setEnabled(!x);
        chkAvailable.setEnabled(!x);
        btnNew.setEnabled(x);
        btnEdit.setEnabled(x);
        btnSend.setEnabled(!x);
        btnCancel.setEnabled(!x);
    }
    
    private void instanceInitComponent() {
        listBooks = new ArrayList<>();
        listAuthors = new ArrayList<>();
        flagBtnNew = false;
        flagBtnEdit = false; 
        setCloseDialogAuthor();
    }
    
    private void fillInitComponent() {
        fillBooksList();
        fillCboGendersBook();
        cboGendersBook.setSelectedIndex(-1);
        fillCboAuthorsBooks();
        cboAuthorsBook.setSelectedIndex(-1);
    }
    
    private boolean validateFill () {
        boolean validate = true;
        if (txtNameBook.getText().equals("")){
            JOptionPane.showMessageDialog(null, "El nombre del libro no puede ser vacío");
            txtNameBook.requestFocus();
            validate = false;
            return validate;
        }
        if (cboAuthorsBook.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un autor para el libro");
            cboAuthorsBook.requestFocus();
            validate = false;
            return validate;
        }
        if (cboGendersBook.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un genero para el libro");
            cboGendersBook.requestFocus();
            validate = false;
            return validate;
        }
        return validate;
    }
    
    private void setCloseDialogAuthor() {
        addAuthor.addActionListener((ActionEvent e) -> {
            jdAuthors dialog = new jdAuthors((Frame) this.getParent(),true,false);
            dialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    fillCboAuthorsBooks();
                    selectAuthorFromJListBooks(selectMaxIdAuthor());
                }
            });
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
        });
    } 
    
    private int selectMaxIdAuthor () {
        int result = 0;
        for (AuthorDTO author : listAuthors) {
            if (result < author.getId()){
                result = author.getId();
            }
        }
        return result;
    }
    
    private void insertBook (SimpleObjDao obj, BookDTO book){
        int result = 0;
        int response = -1;
        
        try {
            response = JOptionPane.showConfirmDialog(null, 
            "¿Esta seguro que quiere agregar el libro "+book.getName()+" ?", 
            "Alerta!", JOptionPane.YES_NO_OPTION);
            if (response ==0)
                result = obj.insert(book);
            else
                btnCancelActionPerformed(null);
        } catch (SQLException ex) {
            System.out.println("Excepcion en el insert de nuevo libro");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (result > 0){
            JOptionPane.showMessageDialog(null, "Se agrego correctamente el libro "+book.getName());
            fillBooksList();
        }else {
            JOptionPane.showMessageDialog(null, "No se agrego correctamente el libro");
        }
    }
    
    private void updateBook (SimpleObjDao obj, BookDTO book){
        int result = 0;
        int response = -1;
        book.setId(listBooks.get(lstBooks.getSelectedIndex()).getId());
        try {
            response = JOptionPane.showConfirmDialog(null, 
                "¿Esta seguro que quiere actualizar el libro "+book.getName()+" ?", 
                "Alerta!", JOptionPane.YES_NO_OPTION);
            if(response ==0)
                result = obj.update(book);
            else
                btnCancelActionPerformed(null);
        } catch (SQLException ex) {
            System.out.println("Excepcion en el update de un libro");
            Logger.getLogger(jdBooks.class.getName()).log(Level.SEVERE, null, ex); 
        }
        if (result > 0){
            JOptionPane.showMessageDialog(null, "Se actualizo correctamente el libro");
            int indexBook = lstBooks.getSelectedIndex();
            fillBooksList();
            lstBooks.setSelectedIndex(indexBook);
        }else {
            JOptionPane.showMessageDialog(null, "No se actualizo correctamente el libro");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAuthor;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> cboAuthorsBook;
    private javax.swing.JComboBox<String> cboGendersBook;
    private javax.swing.JCheckBox chkAvailable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstBooks;
    private javax.swing.JTextField txtNameBook;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
